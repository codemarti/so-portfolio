// en este nivel necesitaremos copiar el contenido de data.txt
// esto con el proposito de realizar un bash scripting al data.txt mas comadamente
// primeramente vemos que el contenido de data.txt esta en hexadecimal, por lo cual para trabajarlo de una mejor manera nos copiaremos el siguiente hexadecimal:
// ⬇️
00000000: 1f8b 0808 6855 1e65 0203 6461 7461 322e  ....hU.e..data2.
00000010: 6269 6e00 013d 02c2 fd42 5a68 3931 4159  bin..=...BZh91AY
00000020: 2653 5948 1b32 0200 0019 ffff faee cff7  &SYH.2..........
00000030: f6ff e4f7 bfbc ffff bff7 ffb9 39ff 7ffb  ............9...
00000040: bd31 eeff b9fb fbbb b9bf f77f b001 3b2c  .1............;,
00000050: d100 0d03 d200 6868 0d00 0069 a00d 0340  ......hh...i...@
00000060: 1a68 00d0 0d01 a1a0 0001 a680 0003 46d4  .h............F.
00000070: 6434 3234 611a 340d 07a4 c351 068f 5000  d424a.4....Q..P.
00000080: 069a 0680 0000 0006 8006 8da4 681a 6868  ............h.hh
00000090: 0d06 8d00 6834 3400 d07a 9a00 01a0 0341  ....h44..z.....A
000000a0: ea1e a190 da40 3d10 ca68 3468 6800 00c8  .....@=..h4hh...
000000b0: 1a1a 1b50 0683 d434 d069 a0d0 3100 d000  ...P...4.i..1...
000000c0: 001e a680 00d0 1a00 d0d0 6864 d0c4 d0d0  ..........hd....
000000d0: 000c 8641 7440 0108 032e 86b4 4cf0 22bb  ...At@......L.".
000000e0: 6682 2b7e b3e2 e98d aa74 dacc 0284 330d  f.+~.....t....3.
000000f0: bbb2 9494 d332 d933 642a 3538 d27e 09ce  .....2.3d*58.~..
00000100: 53da 185a 505e aada 6c75 59a2 b342 0572  S..ZP^..luY..B.r
00000110: 249a 4600 5021 25b0 1973 c18a 6881 1bef  $.F.P!%..s..h...
00000120: 3f9b 1429 5b1d 3d87 68b5 804f 1d28 42fa  ?..)[.=.h..O.(B.
00000130: 16c2 3241 98fb 8229 e274 5a63 fe92 3aca  ..2A...).tZc..:.
00000140: 70c3 a329 d21f 41e0 5a10 08cb 888f 30df  p..)..A.Z.....0.
00000150: f3da ce85 418b 0379 6a65 cfa2 eeb7 9f01  ....A..yje......
00000160: 782c da0e 288b e0c3 fe13 7af5 45ab 2b22  x,..(.....z.E.+"
00000170: a432 bf2f e32d b9e6 1465 2296 d805 a45e  .2./.-...e"....^
00000180: d1c1 eacb 7483 6aac ca0e cf24 8864 bd40  ....t.j....$.d.@
00000190: 118c 644a 1dc6 a127 375c b7a6 c124 bdae  ..dJ...'7\...$..
000001a0: 6d31 63a0 a223 3ea0 61d4 bdf0 450f 56fb  m1c..#>.a...E.V.
000001b0: a546 8d34 08a2 4f1d 43d3 9063 404d dd43  .F.4..O.C..c@M.C
000001c0: b4f2 e65d bcb7 5932 0f5e 6802 3892 a988  ...]..Y2.^h.8...
000001d0: 443d 8e89 7e09 4fb0 499d ee4e 4470 46c0  D=..~.O.I..NDpF.
000001e0: 2ba6 7c62 234a 7f76 151b aec0 23ee 4a97  +.|b#J.v....#.J.
000001f0: bc64 e34c de8a 5724 a1c3 9b89 cd96 1879  .d.L..W$.......y
00000200: d560 0cbb 5c26 09e4 efaf 5b94 402a 7780  .`..\&....[.@*w.
00000210: 4d87 30ce b8a3 946e 72c1 a643 1db7 a060  M.0....nr..C...`
00000220: 6524 629c 0c7e 8e7b e0f8 820c d5cb 60a0  e$b..~.{......`.
00000230: 003c a584 d4c1 61ef eb02 3f65 3a54 a3a2  .<....a...?e:T..
00000240: a565 c154 34c2 b162 d206 1ff8 bb92 29c2  .e.T4..b......).
00000250: 8482 40d9 9010 b3a9 e478 3d02 0000       ..@......x=...

// ahora lo que haremos es copiar todo el hexadecimal anterior a algun archivo (puede ser mediante nano o vi)
// despues para poder ver la data podemos hacer lo siguiente
// ⬇️
xxd -r data.hex > data

// ahora como lo movimos a data, podemos usar file para saber el tipo de archivo que es data, para asi poder renombrarlo a como deberia de ser
// ⬇️
file data

// ahora podemos utilizar 7z para listar el contenido de un comprimido sin descomprimirlo, este programa es universal para la compresion y descompresion de archivos, si no lo tenemos podemos instalarlo con:
// ⬇️
apt install p7zip-full

// ahora listamos el contenido del archivo
// ⬇️
7z l data.gzip

// o tambien podemos extraer el contenido con
// ⬇️
7z x data.gzip

// ahora si queremos que nos liste el contenido mediante un filtro podemos hacer lo siguiente, podemos filtrar por el nombre del comprimido y usar -A para listar dos lineas abajo lo que haya
// ⬇️
7z x data.gzip | grep "Name" -A 2

// ahora podemos usar tail -n 1 para listar la ultia linea
// ⬇️
7z x data.gzip | grep "Name" -A 2 | tail -n 1

// y finalmente para obtener simplemente el nombre del comprimido podemos hacer
// ⬇️
7z x data.gzip | grep "Name" -A 2 | tail -n 1 | awk 'NF{print $NF}'

// ahora pasaremos a la parte del bash scripting
//mediante nano o vi podemos hacer lo siguiente
// ⬇️
#!/bin/bash
# ahora crearemos una varible (a nivel de sistema) que obtiene el valor del comprimido dentro del primer comprimido
name_decompressed=$(7z x data.gzip | grep "Name" -A 2 | tail -n 1 | awk 'NF{print $NF}')
# ahora lo que hacemos es descomprimir el archivo name_decompressed y mandar todo el output del comando al /dev/null y tambien en caso de que hayan errores para que no se listen los redirigimos al stdout
# \/
7z x data.gzip > /dev/null 2>&1

while true; do
  # a continuacion el siguiente comando nos sirvira para sacar el bit de modo que nos servira para ver si entramos en el if o no
  7z l $name_decompressed > /dev/null 2>&1

  # si el comando aplicado a nivel de sistema es 0, entonces nos quiere dicir que es un comprimido, de lo contrario no seria un comprimido
  if [ '$(echo $?)' == '0' ]; then
    # si el codigo nos devuelve 0 entonces eso quiere decir que es un comprimido, por ello declaramos el siguiente comprimido
    decompressed_next=$(7z l name_decompressed | grep "Name" -A 2 | tail -n 1 | awk 'NF{print $NF}')
    
    # ahora aqui es donde descomprimimos el name_decompressed pero como no queremos ver el output por consola entonces redirigimos el output al /dev/null y el stderr lo redirigimos al stdout

    # ahora, debido a que estamos en un bucle infinito, vemos que name_decompressed esta valiendo continuamente lo mismo, por lo tanto debemos actualizar name_decompressed al nombre del siguiente descomprimido
    7z x $name_decompressed > /dev/null 2>&1 && name_decompressed=$decompressed_next
  else
    # cuando ya lleguemos al archivo final no sera un codigo 0 y por ello entrara en el else, con cat podemos mostrar el contenido del archivo y como ya nos lo esta listando, podemos mandar eliminar todos los data con data* y finalmente por si llega haber algun error, los mandamos al stdout
    cat $name_decompressed; rm data* 2>/dev/null
    exit 1
  fi
done
